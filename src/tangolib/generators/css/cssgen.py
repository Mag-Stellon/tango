from tangolib.generator import DocumentGenerator, CommandGenerator, EnvironmentGenerator, SectionGenerator
from tangolib.generator import TextGenerator, PreformatedGenerator, SpacesGenerator, NewlinesGenerator

from os import path
import json


class CSSTemplateError(Exception):
    pass

class CSSDecoratorError(Exception):
    pass


class CSSTemplate:
    
    def __init__(self,data):
        self.data=data

    def getValue(self,selector):
        if selector in self.data:
            return self.data[selector]
        else:
            raise CSSTemplateError("Selector is undefined")

class CSSTemplateFactory:

    @staticmethod
    def createBasicTemplate():
        filePath = path.realpath("../src/tangolib/generators/css/template/basic.template")
        with open(filePath) as content_file:
            content=content_file.read()

        return CSSTemplate(json.loads(content))


class CSSOutput:
    def __init__(self):
        self.output = []
        self.ident_level = 0
        self.isNewLine = False

    def addIdentLevel(self):
        self.ident_level += 4

    def retrieveIdentLevel(self):
        self.ident_level -= 4

    def append(self,  text):
        if self.isNewLine :
            indent_text = []
            for i in range(self.ident_level):
                indent_text.append(" ")
            indent_text.append(text)
        else:
            indent_text=text

        self.output.append( ''.join(indent_text))
        self.isNewLine=False

    def appendInCSS(self,selector,dictPropValue):
        self.append(selector + " {")
        self.newline()
        self.addIdentLevel()

        for prop,value in dictPropValue.items():
            self.append(prop + " : " + value + "; ")
            self.newline()

        self.retrieveIdentLevel()
        self.append("}")
        self.newline()
        self.newline()


    def newline(self):
        self.isNewLine=True
        self.output.append("\n")

    def __str__(self):
        return "" if not self.output else "".join(self.output)



class CSSGeneratorDocument(DocumentGenerator):

    def __init__(self, delegateHTML):
        self.template = CSSTemplateFactory.createBasicTemplate()
        self.output = CSSOutput()
        self.output.append("<!-- CSS generated by Tango --!>")
        self.output.newline()
        self.output.newline()
        self.output.appendInCSS("body",self.template.getValue("body"))
        self.output.appendInCSS("span[class=\"sectionTitle\"]",self.template.getValue("span[class=\"sectionTitle\"]"))



class CSSCommandGeneratorDecorator(CommandGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML

    def enter_command(self, generator, cmd):
        self.delegate.enter_command(generator, cmd)

    def exit_command(self, generator, cmd):
        self.delegate.exit_command( generator, cmd)


class CSSEnvironmentGeneratorDecorator(EnvironmentGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML


    def enter_environment(self, generator, env):
        self.delegate.enter_environment( generator, env)

    def exit_environment(self, generator, env):
        self.delegate.exit_environment( generator, env)


class CSSSectionGeneratorDecorator(SectionGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML


    def enter_section(self, generator, cmd):
        self.delegate.enter_section(generator, cmd)

    def exit_section(self, generator, cmd):
        self.delegate.exit_section(generator, cmd)



class CSSTextGeneratorDecorator(TextGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML

    def on_text(self, generator, text):
        self.delegate.on_text(generator, text)

class CSSPreformatedGeneratorDecorator(PreformatedGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML


    def on_preformated(self, generator, preformated):
        self.delegate.on_preformated(generator, preformated)


class CSSSpacesGeneratorDecorator(SpacesGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML

    def on_spaces(self, generator, spaces):
        self.delegate.on_spaces(generator, spaces)


class CSSNewlinesGeneratorDecorator(NewlinesGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML

    def on_newlines(self, generator, newlines):
        self.delegate.on_newlines(generator, newlines)

