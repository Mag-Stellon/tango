"""Base for CSS generation.
"""
from tangolib.generator import DocumentGenerator, CommandGenerator, EnvironmentGenerator, SectionGenerator
from tangolib.generator import TextGenerator, PreformatedGenerator, SpacesGenerator, NewlinesGenerator
from tangolib.markup import Markup, Text, Preformated, Spaces, Newlines, SkipMarkup

import json
from os import path

class CSSTemplateError(Exception):
    pass

class CSSTemplate:
    
    def __init__(self,data):
        self.data=data

    def getValue(self,aType,key):
        if key in self.data[aType]:
            return self.data[aType][key]
        elif "default" in self.data[aType]:
            return self.data[aType]["default"]
        else:
            raise CSSTemplateError("Key and default value are undefined")

class CSSTemplateFactory:

    @staticmethod
    def createBasicTemplate():
        filePath = path.realpath("../src/tangolib/generators/css/template/basic.template")
        with open(filePath) as content_file:
            content=content_file.read()

        return HTMLTemplate(json.loads(content))

class CSSOutput:
    def __init__(self):
        self.output = []
        self.ident_level = 0
        self.isNewLine = False

    def addIdentLevel(self):
        self.ident_level += 4

    def retrieveIdentLevel(self):
        self.ident_level -= 4

    def append(self,  text):
        if self.isNewLine :
            indent_text = []
            for i in range(self.ident_level):
                indent_text.append(" ")
            indent_text.append(text)
        else:
            indent_text=text

        self.output.append(''.join(indent_text))
        self.isNewLine=False

    def newline(self, orig_pos):
        self.isNewLine=True
        self.output.append("\n")
        
class CSSDocumentGenerator():
    def __init__(self, document, HTML_config):

    def generate_preamble(self):
        return \
"""\
<!-- CSS generated by Tango -->

"""

class DefaultCSSCommandGenerator():
    def __init__(self):
        pass
    
    def generate(self, generator, cmd):

class DefaultCSSEnvironmentGenerator():
    def __init__(self):
        pass
    
    def generate(self, generator, env):

class DefaultCSSSectionGenerator():
    def __init__(self):
        pass
    
    def generate(self, generator, sec):

class CSSTextGenerator():
    def __init__(self):
        pass
        
    def generate(self, generator, text):

class CSSPreformatedGenerator(PreformatedGenerator):
    def __init__(self):
        pass

    def generate(self, generator, preformated):
        
class CSSSpacesGenerator(SpacesGenerator):
    def __init__(self):
        pass

    def generate(self, generator, spaces):

class CSSNewlinesGenerator(NewlinesGenerator):
    def __init__(self):
        pass

    def generate(self, generator, newlines):

