from tangolib.generator import DocumentGenerator, CommandGenerator, EnvironmentGenerator, SectionGenerator
from tangolib.generator import TextGenerator, PreformatedGenerator, SpacesGenerator, NewlinesGenerator

from os import path
import json


class CSSTemplateError(Exception):
    pass

class CSSDecoratorError(Exception):
    pass


class CSSTemplate:
    
    def __init__(self,data):
        self.data=data

    def getValue(self,selector):
        if selector in self.data:
            return self.data[selector]
        else:
            raise CSSTemplateError("Selector is undefined")

class CSSTemplateFactory:

    @staticmethod
    def createBasicTemplate():
        filePath = path.realpath("../src/tangolib/generators/css/template/basic.template")
        with open(filePath) as content_file:
            content=content_file.read()

        return CSSTemplate(json.loads(content))


class CSSOutput:  
    def __init__(self):
        self.output = []
        self.ident_level = 0 
        self.isNewLine = False
 
    def addIdentLevel(self):
        self.ident_level += 4
 
    def retrieveIdentLevel(self):
        self.ident_level -= 4  

    def append(self,  text):
        if self.isNewLine : 
            indent_text = []
            for i in range(self.ident_level):  
                indent_text.append(" ")
            indent_text.append(text)
        else: 
            indent_text=text
  
        self.output.append( ''.join(indent_text))
        self.isNewLine=False
 
    def appendInCSS(self,allData):
  
        for element in allData:
            for selector, datas in element.items():
                self.append(selector + " {") 
                self.newline()
                self.addIdentLevel()  
                for data,value in datas.items():
                    self.append(data + " : " + value + "; ")
                    self.newline()                   
                self.retrieveIdentLevel()
                self.append("}")
                self.newline()
                self.newline()


    def newline(self):
        self.isNewLine=True
        self.output.append("\n")

    def __str__(self):
        return "" if not self.output else "".join(self.output)



class CSSGeneratorDocument(DocumentGenerator):

    def __init__(self, delegateHTML): 


        self.isInsered = dict()
        self.template = CSSTemplateFactory.createBasicTemplate()
        
        self.output = CSSOutput() 
        self.output.append("<!-- CSS generated by Tango --!>")
        self.output.newline()  
        self.output.newline()
        
        self.output.appendInCSS(self.template.getValue("all"))
        self.isInsered['all']=True
        


class CSSCommandGeneratorDecorator(CommandGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML

    def enter_command(self, generator, cmd):
        self.delegate.enter_command(generator, cmd)
        if ('command' not in generator.cssGenerator.isInsered):
            generator.cssGenerator.output.appendInCSS(generator.cssGenerator.template.getValue("command"))
            generator.cssGenerator.isInsered['command']=True


    def exit_command(self, generator, cmd):
        self.delegate.exit_command( generator, cmd)


class CSSEnvironmentGeneratorDecorator(EnvironmentGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML


    def enter_environment(self, generator, env):
        self.delegate.enter_environment( generator, env)
        if ('environement' not in generator.cssGenerator.isInsered ):
            generator.cssGenerator.output.appendInCSS(generator.cssGenerator.template.getValue("environment"))
            generator.cssGenerator.isInsered['environment']=True


    def exit_environment(self, generator, env):
        self.delegate.exit_environment( generator, env)


class CSSSectionGeneratorDecorator(SectionGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML


    def enter_section(self, generator, cmd):
        self.delegate.enter_section(generator, cmd)
        if ('section' not in generator.cssGenerator.isInsered):
            generator.cssGenerator.output.appendInCSS(generator.cssGenerator.template.getValue("section"))
            generator.cssGenerator.isInsered['section']=True

    def exit_section(self, generator, cmd):
        self.delegate.exit_section(generator, cmd)
        

class CSSTextGeneratorDecorator(TextGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML

    def on_text(self, generator, text):
        self.delegate.on_text(generator, text)

class CSSPreformatedGeneratorDecorator(PreformatedGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML


    def on_preformated(self, generator, preformated):
        self.delegate.on_preformated(generator, preformated)


class CSSSpacesGeneratorDecorator(SpacesGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML

    def on_spaces(self, generator, spaces):
        self.delegate.on_spaces(generator, spaces)


class CSSNewlinesGeneratorDecorator(NewlinesGenerator):

    def __init__(self,delegateHTML):
        self.delegate=delegateHTML

    def on_newlines(self, generator, newlines):
        self.delegate.on_newlines(generator, newlines)

